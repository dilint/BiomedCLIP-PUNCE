import time
import torch
import wandb
import numpy as np
from copy import deepcopy
import torch.nn as nn
import pandas as pd
from dataloader import *
from model import *
from loss import *
from torch.utils.data import DataLoader, RandomSampler, default_collate
import argparse, os
from torch.nn.functional import one_hot
from contextlib import suppress
import time
import yaml

from modules.vit_wsi.model_v1 import Model_V1
from timm.utils import AverageMeter,dispatch_clip_grad
from timm.models import  model_parameters
from collections import OrderedDict
from utils import *

id2label = {
    0: 'nilm',
    1: 'ascus',
    2: 'asch',
    3: 'lsil',
    4: 'hsil',
    5: 'agc',
    6: 't',
    7: 'm',
    8: 'bv',}
label2id = {v: k for k, v in id2label.items()}

def main(args):
    # set seed
    seed_torch(args.seed)
            
    if args.datasets.lower() in ['gc_v15']:
        df_train = pd.read_csv(args.train_label_path)
        train_wsi_names = df_train['wsi_name'].values
        train_wsi_labels = df_train['wsi_label'].map(label2id).values
        df_test = pd.read_csv(args.test_label_path)
        test_wsi_names = df_test['wsi_name'].values
        test_wsi_labels = df_test['wsi_label'].map(label2id).values
    acs, pre, rec, fs, auc, te_auc, te_fs=[],[],[],[],[],[],[]
    ckc_metric = [acs, pre, rec, fs, auc, te_auc, te_fs] # acs: [fold, fold] fold: [task1, task2]

    if not args.no_log:
        print_and_log('Dataset: ' + args.datasets, args.log_file)
    one_fold(args, ckc_metric, train_wsi_names, train_wsi_labels, test_wsi_names, test_wsi_labels)

def one_fold(args, ckc_metric, train_p, train_l, test_p, test_l):
    # --->initiation
    if args.keep_psize_collate:
        collate_fn = collate_fn_wsi
    else:
        collate_fn = default_collate
    amp_autocast = torch.cuda.amp.autocast if args.amp else suppress
    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
    acs,pre,rec,fs,auc,te_auc,te_fs = ckc_metric

    # ***--->load data
    if args.datasets.lower() == 'gc_v15':
        train_set = C16Dataset(train_p,train_l,root=args.dataset_root, persistence=args.persistence, \
                                     keep_same_psize=args.same_psize,is_train=True)
        test_set = C16Dataset(test_p,test_l,root=args.dataset_root, persistence=args.persistence, \
                                     keep_same_psize=args.same_psize,is_train=False)
    else:
        assert f'{args.datasets} dataset not found'
        
    if args.imbalance_sampler:
        train_set = ClassBalancedDataset(train_set, oversample_thr=0.22)
    
    if args.fix_loader_random:
        # generated by int(torch.empty((), dtype=torch.int64).random_().item())
        big_seed_list = 7784414403328510413
        generator = torch.Generator()
        generator.manual_seed(big_seed_list)  
        # TODO 增添补齐的collect_fn
        train_loader = DataLoader(train_set, batch_size=args.batch_size, shuffle=True, num_workers=args.num_workers,generator=generator,collate_fn=collate_fn)
    else:
        train_loader = DataLoader(train_set, batch_size=args.batch_size, sampler=RandomSampler(train_set), num_workers=args.num_workers,collate_fn=collate_fn)
        
    test_loader = DataLoader(test_set, batch_size=args.batch_size, shuffle=False, num_workers=args.num_workers,collate_fn=collate_fn)

    model = MIL(input_dim=args.input_dim,
            mlp_dim=512,
            n_classes=args.num_classes,
            mil=args.mil_method,
            dropout=args.dropout).to(device)

    # ***--->construct criterion
    if args.loss == 'bce':
        criterion = nn.BCEWithLogitsLoss()
    elif args.loss == 'ce':
        criterion = nn.CrossEntropyLoss()
    elif args.loss == 'softbce':
        criterion = MySoftBCELoss(neg_weight=args.neg_weight)
    elif args.loss == 'ranking':
        criterion = RankingAndSoftBCELoss(neg_weight=args.neg_weight, neg_margin=args.neg_margin)
    elif args.loss == 'aploss':
        criterion = APLoss()
    elif args.loss == 'focal':
        criterion = FocalLoss(alpha=torch.tensor([0.5, 1, 1, 1, 1]))

    # optimizer
    if args.opt == 'adamw':
        optimizer = torch.optim.AdamW(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)
    elif args.opt == 'adam':
        optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)

    if args.lr_sche == 'cosine':
        scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, args.num_epoch, 0) if not args.lr_supi else torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, args.num_epoch*len(train_loader), 0)
    elif args.lr_sche == 'step':
        assert not args.lr_supi
        # follow the DTFD-MIL
        # ref:https://github.com/hrzhang1123/DTFD-MIL
        scheduler = torch.optim.lr_scheduler.StepLR(optimizer,args.num_epoch / 2, 0.2)
    elif args.lr_sche == 'const':
        scheduler = None

    train_time_meter = AverageMeter()

    # 如果只用来评估测试集的性能
    if args.eval_only:
        ckp = torch.load(os.path.join(args.model_path,'ckp.pt'))
        model.load_state_dict(ckp['model'])
        val_loop(args,model,test_loader,device,criterion)
        return
    
    # 训练epoch
    for epoch in range(args.num_epoch):
        train_loss, start, end = 0, 0, 0
        train_loss,start,end = train_loop(args,model,train_loader,optimizer,device,amp_autocast,criterion,scheduler,epoch)
        train_time_meter.update(end-start)
        
        if not args.no_log:
            print_and_log('\r Epoch [%d/%d] train loss: %.1E, time: %.3f(%.3f)' % 
        (epoch+1, args.num_epoch, train_loss, train_time_meter.val, train_time_meter.avg), args.log_file)
        
        # save checkpoint
        random_state = {
            'np': np.random.get_state(),
            'torch': torch.random.get_rng_state(),
            'py': random.getstate(),
            'loader': train_loader.sampler.generator.get_state() if args.fix_loader_random else '',
        }
        ckp = {
            'model': model.state_dict(),
            'lr_sche': scheduler.state_dict(),
            'optimizer': optimizer.state_dict(),
            'epoch': epoch+1,
            'random': random_state,
            'ckc_metric': [acs,pre,rec,fs,auc,te_auc,te_fs],
        }
        if epoch % args.save_epoch == 0 or epoch == args.num_epoch-1:
            ckp_file_name = f'epoch_{epoch}_model.pt'
            torch.save(ckp, os.path.join(args.model_path, ckp_file_name))

    torch.save(ckp, os.path.join(args.model_path, 'ckp.pt'))
    # test
    if not args.no_log:
        best_std = torch.load(os.path.join(args.model_path, 'ckp.pt'))
        info = model.load_state_dict(best_std['model'])
        print_and_log(info, args.log_file)
        
    print_and_log('Info: Evaluation for test set', args.log_file)
    aucs, acc, recs, precs, f1s, test_loss = val_loop(args,model,test_loader,device,criterion)
    return 

def train_loop(args,model,loader,optimizer,device,amp_autocast,criterion,scheduler,epoch):
    start = time.time()
    loss_cls_meter = AverageMeter()
    train_loss_log = 0.
    model.train()
    if not args.no_log:
        n_parameters = sum(p.numel() for p in model.parameters() if p.requires_grad)
        num_total_param = sum(p.numel() for p in model.parameters())
        print_and_log('Number of total parameters: {}, tunable parameters: {}'.format(num_total_param, n_parameters), args.log_file)
    
    last_time = time.time()
    for i, data in enumerate(loader):
        optimizer.zero_grad()
        
        bag, label, file_path = data[0].to(device), data[1].to(device), data[2]  # [b,n,1024]
        bag_mask = data[3].to(device)  # [b,n,25]
        batch_size=bag.size(0)
        label_onehot = one_hot(label.view(batch_size,-1),num_classes=args.num_classes).squeeze(1).float()
            
        with amp_autocast():
            if args.patch_shuffle:
                bag = patch_shuffle(bag,args.shuffle_group)
            elif args.group_shuffle:
                bag = group_shuffle(bag,args.shuffle_group)

            if args.mil_method == 'tma':
                train_logits = model(bag, bag_mask)  # [B, sum_num_classes]
            else:
                train_logits = model(bag) # [B, sum_num_classes]
                
            if args.loss in ['ce', 'focal']:
                logit_loss = criterion(train_logits.view(batch_size,-1),label)
            elif args.loss in ['bce', 'softbce', 'ranking']:
                logit_loss = criterion(train_logits.view(batch_size,-1),label_onehot)
            elif args.loss == 'aploss':
                logit_loss = criterion.apply(train_logits.view(batch_size,-1),label_onehot)
            assert not torch.isnan(logit_loss)

        train_loss = logit_loss
        train_loss = train_loss / args.accumulation_steps
        if args.clip_grad > 0.:
            dispatch_clip_grad(
                model_parameters(model),
                value=args.clip_grad, mode='norm')

        if (i+1) % args.accumulation_steps == 0:
            train_loss.backward()
            optimizer.step()
            if args.lr_supi and scheduler is not None:
                scheduler.step()
                
        loss_cls_meter.update(logit_loss,1)

        if i % args.log_iter == 0 or i == len(loader)-1:
            lrl = [param_group['lr'] for param_group in optimizer.param_groups]
            lr = sum(lrl) / len(lrl)
            rowd = OrderedDict([
                ('train_loss', train_loss),
                ('lr',lr),
            ])
            if not args.no_log:
                print_and_log('[{}/{}] logit_loss:{}'.format(i,len(loader)-1,loss_cls_meter.avg), args.log_file)
            rowd = OrderedDict([ (_k,_v) for _k, _v in rowd.items()])
            if args.wandb:
                wandb.log(rowd)

        train_loss_log = train_loss_log + train_loss.item()

    end = time.time()
    train_loss_log = train_loss_log/len(loader)
    if not args.lr_supi and scheduler is not None:
        scheduler.step()
    
    return train_loss_log,start,end

def val_loop(args,model,loader,device,criterion):
    """
    返回:
        stop (bool): 是否earlystop
        roc_auc_macro (ndarray): 多类别ROC_AUC
        accuracy (float): Micro 准确率
        recall (ndarray): Macro 阳性召回率 len = 8 or 4 
        precision (ndarray): Macro 阳性精确率
        fscore (ndarray): Macro F1分数
        loss_cls_meter (float): 损失
    """
    model.eval()
    loss_cls_meter = AverageMeter()
    
    bag_logits, bag_labels, bag_onehot_labels, wsi_names = [], [], [], []
    with torch.no_grad():
        for i, data in enumerate(loader):
            bag, label, file_path = data[0].to(device), data[1].to(device), data[2]  # [b,n,1024]
            bag_mask = data[3].to(device)  # [b,n,25]
            batch_size=bag.size(0)
            label_onehot = one_hot(label.view(batch_size,-1),num_classes=args.num_classes).squeeze(1).float()
            wsi_name = [os.path.basename(wsi_path) for wsi_path in data[2]]
            
            if args.mil_method == 'tma':
                test_logits = model(bag, bag_mask)
            else:
                test_logits = model(bag)
            batch_size = bag.size(0)
            bag_labels.extend(data[1])
            bag_onehot_labels.extend(label_onehot)
            wsi_names.extend(wsi_name)
            test_logits = test_logits.detach()
            
            if args.loss in ['ce']:
                test_loss = criterion(test_logits.view(batch_size,-1),label)    
                if args.num_classes == 2:
                    bag_logits.extend(torch.softmax(test_logits,dim=-1)[:,1].cpu().numpy())
                else:
                    bag_logits.extend(torch.softmax(test_logits, dim=-1).cpu().numpy())
            # TODO have not updated            
            elif args.loss in ['bce', 'softbce', 'ranking', 'aploss', 'focal']:
                if args.loss in ['focal']:
                    test_loss = criterion(test_logits.view(batch_size,-1),label)
                elif args.loss in ['bce', 'softbce', 'ranking']:
                    test_loss = criterion(test_logits.view(batch_size,-1),label_onehot)
                elif args.loss == 'aploss':
                    test_loss = criterion.apply(test_logits.view(batch_size,-1),label_onehot)
                
                if args.num_classes == 2:
                    bag_logits.extend(torch.sigmoid(test_logits)[:,1].cpu().numpy())
                else:
                    bag_logits.extend(torch.sigmoid(test_logits).cpu().numpy())
            loss_cls_meter.update(test_loss,1)
    
    class_labels = ['nilm', 'ascus', 'asch', 'lsil', 'hsil', 'agc', 't', 'm', 'bv']
    bag_onehot_labels = [label.cpu() for label in bag_onehot_labels]
    roc_auc, accuracies, recalls, precisions, fscores, cancer_matrix, microbial_matrix = multi_class_scores_mtl(bag_onehot_labels, bag_logits, class_labels, wsi_names, threshold=args.threshold)
    output_excel_path = os.path.join(args.model_path, 'metrics.xlsx')
    save_metrics_to_excel(roc_auc, accuracies, recalls, precisions, fscores, cancer_matrix, microbial_matrix, class_labels, output_excel_path)

    if args.loss in ['ce']:
        loss_cls_meter = loss_cls_meter.avg
    else:
        loss_cls_meter = loss_cls_meter.sum
    return roc_auc, accuracies, recalls, precisions, fscores, loss_cls_meter

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='MIL Training Script')

    # Dataset 
    parser.add_argument('--datasets', default='gc_v15', type=str, help='[ngc, gc, gc_v15, gc_fine]')
    parser.add_argument('--dataset_root', default='/data/wsi/TCTGC50k-features/gigapath-coarse', type=str, help='Dataset root path')
    parser.add_argument('--fix_loader_random', action='store_true', help='Fix random seed of dataloader')
    parser.add_argument('--fix_train_random', action='store_true', help='Fix random seed of Training')
    parser.add_argument('--persistence', action='store_true', help='Load data into memory') 
    parser.add_argument('--num_classes', default=9, type=int, help='Number of classes 9')
    
    # Dataset aug    
    parser.add_argument('--imbalance_sampler', default=0, type=float, help='if use imbalance_sampler')
    parser.add_argument('--same_psize', default=1000, type=int, help='Keep the same size of all patches [0]')
    parser.add_argument('--fine_concat', default=0, type=int, help='flatten the fine feature')

    # Train
    parser.add_argument('--num_epoch', default=50, type=int, help='Number of total training epochs [200]')
    parser.add_argument('--batch_size', default=16, type=int, help='Number of batch size')
    
    # Loss
    parser.add_argument('--loss', default='bce', type=str, help='Classification Loss [ce, bce, softbce, ranking, aploss, focal]')
    parser.add_argument('--neg_weight', default=0.0, type=float, help='Weight for positive sample in SoftBCE')
    parser.add_argument('--neg_margin', default=0, type=float, help='if use neg_margin in ranking loss')
    parser.add_argument('--opt', default='adam', type=str, help='Optimizer [adam, adamw]')
    parser.add_argument('--save_best_model_stage', default=0., type=float, help='See DTFD')
    parser.add_argument('--seed', default=2024, type=int, help='random number [2021]' )
    parser.add_argument('--lr', default=2e-3, type=float, help='Initial learning rate [0.0002]')
    parser.add_argument('--lr_sche', default='cosine', type=str, help='Deacy of learning rate [cosine, step, const]')
    parser.add_argument('--lr_supi', action='store_true', help='LR scheduler update per iter')
    parser.add_argument('--weight_decay', default=1e-5, type=float, help='Weight decay [5e-3]')
    parser.add_argument('--accumulation_steps', default=1, type=int, help='Gradient accumulate')
    parser.add_argument('--clip_grad', default=.0, type=float, help='Gradient clip')

    # Model
    # mil meathod
    parser.add_argument('--mil_method', default='abmil', type=str, help='Model name [abmil, transmil, dsmil, clam, linear, tma]')
    parser.add_argument('--input_dim', default=1536, type=int, help='The dimention of patch feature')
    parser.add_argument('--act', default='relu', type=str, help='Activation func in the projection head [gelu,relu]')
    parser.add_argument('--dropout', default=0.25, type=float, help='Dropout in the projection head')
    parser.add_argument('--da_act', default='relu', type=str, help='Activation func in the DAttention [gelu,relu]')

    # Shuffle
    parser.add_argument('--patch_shuffle', action='store_true', help='2-D group shuffle')
    parser.add_argument('--group_shuffle', action='store_true', help='Group shuffle')
    parser.add_argument('--shuffle_group', default=0, type=int, help='Number of the shuffle group')

    # Misc
    parser.add_argument('--model_path', type=str, default='./output-model', help='Output path')
    parser.add_argument('--project', default='gcv15', type=str, help='Project name of exp')
    parser.add_argument('--title', default='gigapath-abmil-0328', type=str, help='Title of exp')
    parser.add_argument('--log_iter', default=100, type=int, help='Log Frequency')
    parser.add_argument('--amp', action='store_true', help='Automatic Mixed Precision Training')
    parser.add_argument('--wandb', action='store_true', help='Weight&Bias')
    parser.add_argument('--num_workers', default=16, type=int, help='Number of workers in the dataloader')
    parser.add_argument('--save_epoch', default=10, type=int, help='epoch number to save model')
    parser.add_argument('--no_log', action='store_true', help='Without log')
    parser.add_argument('--task_config', type=str, default='./configs/oh_5.yaml', help='Task config path')
    parser.add_argument('--eval_only', action='store_true', help='Only evaluate')
    parser.add_argument('--keep_psize_collate', type=float, default=0, help='use collate to keep patch size')
    parser.add_argument('--threshold', default=0.5, type=float, help='threshold for evaluation')
    
    args = parser.parse_args()
    
    if args.datasets == 'gc_v15':
        args.train_label_path = '/data/wsi/TCTGC50k-labels/TCTGC50k-v15-train.csv'
        args.test_label_path = '/data/wsi/TCTGC50k-labels/TCTGC50k-v15-test.csv'
    else:
        assert f'{args.datasets} is not supported'
    
    if not os.path.exists(os.path.join(args.model_path,args.project)):
        os.mkdir(os.path.join(args.model_path,args.project))
    args.model_path = os.path.join(args.model_path,args.project,args.title)
    args.log_file = os.path.join(args.model_path, 'log.txt')
    if not os.path.exists(args.model_path):
        os.mkdir(args.model_path)

    args.fix_loader_random = True
    args.fix_train_random = True
    
    print_and_log(args, args.log_file)
    localtime = time.asctime(time.localtime(time.time()) )
    print_and_log(localtime, args.log_file)
    main(args=args)
